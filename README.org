** Install and use

*1. Download and install workflow*

#+begin_src sh
git clone https://github.com/thackl/omx-discover-eves
cd omx-discover-eves

# install with conda - I prefer mamba
mamba create -n omx-discover-eves
mamba activate omx-discover-eves
mamba env update --file workflow/envs/env.yaml
#+end_src

*2. Setup databases*

#+begin_src sh
# download uniref50 for retroblast
snakemake --cores 30 setup

# add virus ref db
resources/VDB.dmnd
#+end_src

*3. Provide genomes as files or accessions*
  - for *files*: place your genomes as fasta files with =.fna= extensions into the
    =genomes/= folder
  - for *accessions*: add SRA WGS accessions to the first column of
    =genomes.tsv=. The genome fasta files will automatically be downloaded from
    NCBI to =genomes/<accession>.fna= (see
    https://www.ncbi.nlm.nih.gov/Traces/wgs/, for example, QMGA01 for the
    bottlenose dolphin).

*4. Run the workflow*
#+begin_src sh
snakemake --cores 30 --keep-going # don't terminate snakemake if one genome
                                  # fails but others are still being
                                  # processed. Can happen if a genomes contains
                                  # no putativEVEs or validatEVEs
#+end_src

*NOTE:* If you encounter an error related to
/tidyverse/stringi/libicui18n.so.58/, try reinstalling =stringi= locally

#+begin_src sh
mamba remove r-stringi r-tidyverse
R -e 'install.packages("stringi")'
mamba install r-tidyverse

# restart workflow from where it failed
snakemake --cores 30 --keep-going
#+end_src

** Output
The pipeline produces the following final files in =results/=:
- =<genome_id>-validatEVEs.tsv= - best hit of the EVE with evidence and confidence
  annotation (exogenous virus: high, eve-ish description & hypothetical protein:
  low)
- =<genome_id>-validatEVEs.pdf= - graphical overview of hit distribution for validatEVEs
- =<genome_id>-validatEVEs.fna= - validatEVEs nucleotide sequences

** Workflow
[[file:omx-discover-eves.png]]

** Changes (compared to legacy)
- =diamond blastx= instead of =tblastn=

- =diamond= is used in frameshift mode to can extend hits across frameshifts;
  dropped merging of abutting =tblastn= hits from orig pipeline

- need to chop long contigs for diamond or else I lose hits (50k + 10k overlap
  windows). Creates possibility of redundant hits right at window edge (could be
  filtered?)

- uniref50 instead of NR for retroblast (faster, less redundant)

- retroblast: --top 20 (top hits within 20% top score, rather than strict -k 10 top hits)

- min_length: 83 amino-acids (250 bp in tblastn)

- VDB80 - reduced DB at 80% identity over 80 coverage (with mmseqs); min-length
  60aa; tantan masked to get rid of low-complexity region, such as
  Proline/Serine linkers Ig side chains

** Questions & Notes
- lots of putatEVEs are low-complexity repeats - meaningful? => I'm now tantan
  masking VDB which gets rid of most of these low-complexity hits (Ig side chain
  stuff, PSSPSPSS linker, ...)

- currently I'm not filtering out retroviral hits - but we probably should?

- are validatEVEs just subset of putatEVEs or somehow extracted based on
  retroblast results?
