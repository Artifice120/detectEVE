#!/usr/bin/env python3
"""detectEVE - find endogenous viral elements in genomes

Please cite:
- Brait, Hackl, Lequime, "detectEVE - ..."

- Bigot T, Temmam S, Pérot P and Eloit M. "RVDB-prot, a reference viral protein database
  and its HMM profiles", F1000Research (2020) doi:10.12688/f1000research.18776.2
- Buchfink B, Reuter K, Drost HG. "Sensitive protein alignments at tree-of-life scale
  using DIAMOND", Nature Methods 18, 366–368 (2021) doi:10.1038/s41592-021-01101-x
- Shen W, Le S, Li Y, Hu F. "SeqKit: A Cross-Platform and Ultrafast Toolkit for FASTA/Q
  File Manipulation". PLOS ONE 11(10): e0163962 (2016) doi:10.1371/journal.pone.0163962

Usage:
  detectEVE [options] [<in.fa> ...]
  detectEVE [options] -a acc.csv
  detectEVE [options] -A acc,acc
  detectEVE [options] [--snake args] [(-a acc.csv | -A acc,acc)] [<in.fa> ...]
  detectEVE --setup-databases [--snake args]

Options:
  -a --acc-csv acc.csv   Comma-separated table with NCBI WGS genome accessions in
                         first column. First line is ignored! Works with tables
                         downloaded from https://www.ncbi.nlm.nih.gov/Traces/wgs/.
                         genomes are temporarily downloaded to `genomes/<acc>.fna`.
                         Add `--notemp` to `--snake`-args to keep all downloads.
  -A --acc-list acc,acc  Comma-separated string of NCBI genome accessions.
                         Otherwise same as `--acc-csv`.
  -o --out out           Output directory [default: detectEVE-%Y%m%d-%H%M%S]
                         
  --setup-databases      Download and prepare reference databases. This can take a
                         few hours. Configure paths in config.yaml. See documentation
                         for alternative database setup options.
                         
  -s --snake args        Overwrite/add arguments to for snakemake. Need to be enclosed
                         in quotes, e.g. `-s '--cores 1 --verbose --notemp'`.
                         [default: --cores all --keep-going]
                         
  -h --help              Show this screen.
  --version              Show version.

Documentation & Support:
  https://github.com/thackl/detectEVE

"""

import os
import glob
import subprocess
import time
import sys
import re
from docopt import docopt

if len(sys.argv) == 1:
    sys.argv.append('-h')

opt = docopt(__doc__, version='detectEVE v1.2.0', options_first=True)
print(opt)
# establish snakemake workflow and out dir
out = time.strftime(opt["--out"])
out = os.path.abspath(out)

# start workflow
wf_dir  = os.path.dirname(os.path.abspath(__file__))

if opt["--setup-databases"]:
    cmd='snakemake setup' + f' {opt["--snake"]} --config wf_dir={wf_dir}'
    print(cmd)
    subprocess.run(cmd, shell=True, cwd=wf_dir)
    sys.exit()


# prep working dir and input
genome_dir=os.path.join(out, "genomes/")
os.makedirs(genome_dir, exist_ok=True)

if opt["--acc-csv"]:
    csv=os.path.abspath(opt["--acc-csv"])
    if not csv == f'{out}/accessions.csv':
        os.system(f'cp {csv} {out}/accessions.csv')
        
elif opt["--acc-list"]:
    with open(f'{out}/accessions.csv', "w") as f:
        f.write("#accession\n")
        [f.write(acc + "\n") for acc in opt["--acc-list"].split(",")]

if opt["<in.fa>"]:
    for fa in opt["<in.fa>"]:
        fa_src=os.path.abspath(fa)
        if not os.path.exists(fa_src):
            print(f"{fa_src} does not exist")
            sys.exit()
            
        fa_dst=os.path.join(genome_dir, os.path.basename(fa)) # ensure .fna suffix
        fa_dst=os.path.splitext(fa_dst)[0]+'.fna'
        if not fa_src == fa_dst:
            try:
                os.remove(fa_dst)
            except:
                pass
            os.symlink(fa_src, fa_dst)

cmd='snakemake' + f' --directory {out} {opt["--snake"]} --config wf_dir={wf_dir}'
print(cmd)
subprocess.run(cmd, shell=True, cwd=wf_dir)

# summary - quick and somewhat dirty summary
p = subprocess.run(f'cat {genome_dir}/*.log | grep -c "^Bad accession"',
                   capture_output=True, shell=True, text=True)
n_bad_accs = int(p.stdout.rstrip())
n_searches = len(glob.glob('results/*-search.o6', root_dir=out))
out_files = glob.glob('results/*-validatEVEs.tsv', root_dir=out)

n_high = 0
n_low = 0

for of in out_files:
    with open(f'{out}/{of}') as f:
        contents = f.read()
        n_high = n_high + sum(1 for match in re.finditer(r"\thigh\t", contents))
        n_low = n_low + sum(1 for match in re.finditer(r"\tlow\t", contents))
    
print("\ndetectEVE run complete:")
if n_bad_accs > 0:
    print(f'{n_bad_accs} accessions failed to download, see logs for details [{genome_dir}]')
print(f"{n_searches} genomes scanned, {n_high} high and {n_low} low confidence EVE hits found")
